1] Pick a programming language which is a) popular b) you are interested in learning 
2] Learn basic syntax and the structure of the language, how the programs in it are executed
   You can use online videos, tutorials and beginners books
3] Start writing simple code in that language to understand all the constructs of the language- 
   its keywords, looping, conditional statements, File I/O, 
4] Have a good setup of editor, compiler for the language, to write the code, execute it. Get comfortable with it. 
5] Solve coding puzzles using that language
 there are plenty of sites online these days for that!
6] Start writing code for small projects to do something useful
7] Read lot of code from that


𝗛𝗼𝘄 𝘁𝗼 𝗹𝗲𝗮𝗿𝗻 𝗮𝗻𝘆 𝗻𝗲𝘄 𝗽𝗿𝗼𝗴𝗿𝗮𝗺𝗺𝗶𝗻𝗴 𝗹𝗮𝗻𝗴𝘂𝗮𝗴𝗲 𝗮𝗻𝗱 𝗯𝗲𝗰𝗼𝗺𝗲 𝗿𝗲𝗮𝘀𝗼𝗻𝗮𝗯𝗹𝘆 𝘀𝗸𝗶𝗹𝗹𝗲𝗱 𝗶𝗻 𝗶𝘁? 
(1/n To be continued in next post)

𝖳𝗁𝗂𝗌 𝗂𝗌 𝖺 𝗎𝖻𝗂𝗊𝗎𝗂𝗍𝗈𝗎𝗌 𝗊𝗎𝖾𝗌𝗍𝗂𝗈𝗇 𝖿𝗈𝗋 𝗆𝖺𝗇𝗒 𝗇𝖾𝗐, 𝗂𝗇𝗍𝖾𝗋𝗆𝖾𝖽𝗂𝖺𝗍𝖾 𝗌𝗈𝖿𝗍𝗐𝖺𝗋𝖾 𝖽𝖾𝗏𝖾𝗅𝗈𝗉𝖾𝗋𝗌. 𝖤𝗏𝖾𝗇 𝖺𝗇 𝖾𝗑𝗉𝖾𝗋𝗂𝖾𝗇𝖼𝖾𝖽 𝖽𝖾𝗏𝖾𝗅𝗈𝗉𝖾𝗋 𝗌𝗐𝗂𝗍𝖼𝗁𝗂𝗇𝗀 𝗍𝗈 𝖺 𝗇𝖾𝗐 𝗌𝗍𝖺𝖼𝗄 𝗆𝗂𝗀𝗁𝗍 𝖼𝗈𝗆𝖾 𝖺𝖼𝗋𝗈𝗌𝗌 𝗍𝗁𝗂𝗌 𝗉𝗋𝗈𝖻𝗅𝖾𝗆. 
𝖨𝗇 𝗆𝗒 𝗃𝗈𝗎𝗋𝗇𝖾𝗒 𝗌𝗍𝖺𝗋𝗍𝗂𝗇𝗀 𝖿𝗋𝗈𝗆 𝖢,𝖢++ 𝗍𝗁𝗂𝗌 𝗐𝖺𝗌 𝖺𝗅𝗐𝖺𝗒𝗌 𝖺 𝗊𝗎𝖾𝗌𝗍𝗂𝗈𝗇.
𝖣𝗎𝗋𝗂𝗇𝗀 𝗆𝗒 𝖯𝗒𝗍𝗁𝗈𝗇 𝖼𝗈𝖽𝗂𝗇𝗀 𝗃𝗈𝗎𝗋𝗇𝖾𝗒, 𝖨 𝖿𝗈𝗎𝗇𝖽 𝗍𝗁𝖺𝗍 𝗍𝗁𝖾𝗋𝖾 𝖺𝗋𝖾 𝖼𝖾𝗋𝗍𝖺𝗂𝗇 𝘤𝘰𝘮𝘮𝘰𝘯 𝘱𝘳𝘰𝘨𝘳𝘢𝘮𝘮𝘪𝘯𝘨 𝘤𝘰𝘯𝘴𝘵𝘳𝘶𝘤𝘵𝘴, 𝘪𝘥𝘦𝘢𝘴 𝖺𝗇𝖽 𝘵𝘰𝘰𝘭𝘴 𝗈𝗇𝖾 𝗇𝖾𝖾𝖽𝗌 𝗍𝗈 𝗅𝖾𝖺𝗋𝗇 𝗂𝗋𝗋𝖾𝗌𝗉𝖾𝖼𝗍𝗂𝗏𝖾 𝗈𝖿 𝗍𝗁𝖾 𝗉𝗋𝗈𝗀𝗋𝖺𝗆𝗆𝗂𝗇𝗀 𝗅𝖺𝗇𝗀𝗎𝖺𝗀𝖾. 𝖡𝖾𝗅𝗈𝗐 𝖨 𝗁𝖺𝗏𝖾 𝖼𝗈𝗅𝗅𝖾𝖼𝗍𝖾𝖽 𝖺 𝗅𝗂𝗌𝗍 𝗈𝖿 𝗌𝗎𝖼𝗁 𝗅𝖺𝗇𝗀𝗎𝖺𝗀𝖾 𝖼𝗈𝗇𝗌𝗍𝗋𝗎𝖼𝗍𝗌 𝗐𝗁𝗂𝖼𝗁 𝖺𝗋𝖾 𝗇𝗈𝗍 𝗇𝖾𝖼𝖾𝗌𝗌𝖺𝗋𝗂𝗅𝗒 𝖾𝗑𝗁𝖺𝗎𝗌𝗍𝗂𝗏𝖾 𝖻𝗎𝗍 𝗀𝗈𝗈𝖽 𝖾𝗇𝗈𝗎𝗀𝗁 𝗍𝗈 𝖼𝗈𝗏𝖾𝗋 𝗆𝖺𝗇𝗒 𝖺𝗌𝗉𝖾𝖼𝗍𝗌. 𝖢𝖾𝗋𝗍𝖺𝗂𝗇 𝗍𝗈𝗈𝗅𝗌 𝗆𝖾𝗇𝗍𝗂𝗈𝗇𝖾𝖽 𝗂𝗇 𝗉𝖺𝗋𝖾𝗇𝗍𝗁𝖾𝗌𝗂𝗌 𝖿𝗈𝗋 𝗍𝗁𝖾 𝗉𝗈𝗂𝗇𝗍 𝖺𝗋𝖾 𝖯𝗒𝗍𝗁𝗈𝗇 𝗌𝗉𝖾𝖼𝗂𝖿𝗂𝖼, 𝖻𝗎𝗍 𝗌𝗂𝗆𝗂𝗅𝖺𝗋 𝖼𝗈𝗎𝗇𝗍𝖾𝗋𝗉𝖺𝗋𝗍𝗌 𝗐𝗈𝗎𝗅𝖽 𝖾𝗑𝗂𝗌𝗍 𝗂𝗇 𝗈𝗍𝗁𝖾𝗋 𝗅𝖺𝗇𝗀𝗎𝖺𝗀𝖾𝗌 𝖺𝗌 𝗐𝖾𝗅𝗅.
𝖧𝖾𝗋𝖾 𝗂𝗌 𝗍𝗁𝖾 𝗅𝗂𝗌𝗍: 

• 𝖫𝖺𝗇𝗀𝗎𝖺𝗀𝖾 𝗌𝗒𝗇𝗍𝖺𝗑
• 𝖪𝖾𝗒𝗐𝗈𝗋𝖽𝗌
• 𝖵𝖺𝗋𝗂𝗈𝗎𝗌 𝖮𝗉𝖾𝗋𝖺𝗍𝗈𝗋𝗌
• 𝖫𝗈𝗈𝗉𝗌
• 𝖢𝗈𝗇𝖽𝗂𝗍𝗂𝗈𝗇𝖺𝗅 𝗌𝗍𝖺𝗍𝖾𝗆𝖾𝗇𝗍𝗌
• 𝖥𝗂𝗅𝖾 𝗂𝗇𝗉𝗎𝗍 𝗈𝗎𝗍𝗉𝗎𝗍
• 𝖢𝗈𝗇𝗌𝗈𝗅𝖾 𝗂𝗇𝗉𝗎𝗍 𝗈𝗎𝗍𝗉𝗎𝗍
• 𝖭𝖺𝗍𝗂𝗏𝖾 𝖽𝖺𝗍𝖺 𝗍𝗒𝗉𝖾𝗌 
• 𝖥𝗎𝗇𝖼𝗍𝗂𝗈𝗇 𝖽𝖾𝖿𝗂𝗇𝗂𝗍𝗂𝗈𝗇𝗌, 𝗂𝗇𝗏𝗈𝖼𝖺𝗍𝗂𝗈𝗇, 𝖺𝗋𝗀𝗎𝗆𝖾𝗇𝗍𝗌 𝗉𝖺𝗌𝗌𝗂𝗇𝗀
• 𝖤𝗑𝖼𝖾𝗉𝗍𝗂𝗈𝗇𝗌 𝗁𝖺𝗇𝖽𝗅𝗂𝗇𝗀
• 𝖣𝖺𝗍𝖺 𝖲𝗍𝗋𝗎𝖼𝗍𝗎𝗋𝖾𝗌 𝗂𝗆𝗉𝗅𝖾𝗆𝖾𝗇𝗍𝖺𝗍𝗂𝗈𝗇 
• 𝖠𝗅𝗀𝗈𝗋𝗂𝗍𝗁𝗆𝗌 𝗂𝗆𝗉𝗅𝖾𝗆𝖾𝗇𝗍𝖺𝗍𝗂𝗈𝗇
• 𝖢𝗅𝖺𝗌𝗌𝖾𝗌- 𝗈𝖻𝗃𝖾𝖼𝗍 𝗈𝗋𝗂𝖾𝗇𝗍𝖾𝖽 𝗉𝗋𝗈𝗀𝗋𝖺𝗆𝗆𝗂𝗇𝗀 
• 𝖦𝖴𝖨 𝖽𝖾𝗏𝖾𝗅𝗈𝗉𝗆𝖾𝗇𝗍
• 𝖬𝖾𝗆𝗈𝗋𝗒 𝗆𝗈𝖽𝖾𝗅, 𝖦𝖺𝗋𝖻𝖺𝗀𝖾 𝖼𝗈𝗅𝗅𝖾𝖼𝗍𝗂𝗈𝗇
• 𝖤𝗑𝖾𝖼𝗎𝗍𝗂𝗇𝗀 𝗈𝗍𝗁𝖾𝗋 𝗉𝗋𝗈𝖼𝖾𝗌𝗌 𝖾𝗑𝖾𝖼𝗎𝗍𝖺𝖻𝗅𝖾𝗌 𝖿𝗋𝗈𝗆 𝖯𝗒𝗍𝗁𝗈𝗇
• 𝖬𝗎𝗅𝗍𝗂𝗍𝗁𝗋𝖾𝖺𝖽𝗂𝗇𝗀 (𝗍𝗁𝗋𝖾𝖺𝖽𝗂𝗇𝗀 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖬𝗎𝗅𝗍𝗂𝗉𝗋𝗈𝖼𝖾𝗌𝗌𝗂𝗇𝗀 (𝗆𝗎𝗅𝗍𝗂𝗉𝗋𝗈𝖼𝖾𝗌𝗌𝗂𝗇𝗀 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖱𝖾𝗀𝗎𝗅𝖺𝗋 𝖾𝗑𝗉𝗋𝖾𝗌𝗌𝗂𝗈𝗇𝗌 (𝗋𝖾 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖭𝖾𝗍𝗐𝗈𝗋𝗄 𝗌𝗈𝖼𝗄𝖾𝗍𝗌 𝖳𝖢𝖯, 𝖴𝖣𝖯 (𝗌𝗈𝖼𝗄𝖾𝗍 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖣𝖺𝗍𝖾𝗍𝗂𝗆𝖾 𝗆𝗈𝖽𝗎𝗅𝖾 (𝗍𝗂𝗆𝖾, 𝖽𝖺𝗍𝖾𝗍𝗂𝗆𝖾 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖫𝗈𝗀𝗀𝗂𝗇𝗀 𝗆𝗈𝖽𝗎𝗅𝖾 𝗅𝗈𝗀𝗀𝗂𝗇𝗀 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖤𝗑𝖼𝖾𝗅 𝖿𝗂𝗅𝖾, 𝖢𝖲𝖵 𝗆𝖺𝗇𝗂𝗉𝗎𝗅𝖺𝗍𝗂𝗈𝗇𝗌 (𝗉𝖺𝗇𝖽𝖺𝗌, 𝖼𝗌𝗏 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖣𝖺𝗍𝖺𝖻𝖺𝗌𝖾 𝖺𝖼𝖼𝖾𝗌𝗌
• 𝖲𝖾𝗇𝖽𝗂𝗇𝗀 𝖧𝖳𝖳𝖯 𝗋𝖾𝗊𝗎𝖾𝗌𝗍𝗌, 𝗉𝖺𝗋𝗌𝗂𝗇𝗀 𝗋𝖾𝗌𝗉𝗈𝗇𝗌𝖾 (𝗋𝖾𝗊𝗎𝖾𝗌𝗍𝗌)
• 𝖩𝖲𝖮𝖭 𝗁𝖺𝗇𝖽𝗅𝗂𝗇𝗀 (𝗃𝗌𝗈𝗇 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖢𝗈𝗆𝗆𝖺𝗇𝖽 𝗅𝗂𝗇𝖾 𝖺𝗋𝗀𝗎𝗆𝖾𝗇𝗍𝗌 𝗉𝖺𝗋𝗌𝗂𝗇𝗀 (𝗌𝗒𝗌.𝖺𝗋𝗀𝗌, 𝖺𝗋𝗀𝗉𝖺𝗋𝗌𝖾 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖵𝖺𝗋𝗂𝗈𝗎𝗌 𝗆𝗈𝖽𝗎𝗅𝖾𝗌 
  𝖿𝗎𝗇𝖼𝗍𝗈𝗈𝗅𝗌, 𝗂𝗍𝖾𝗋𝗍𝗈𝗈𝗅𝗌, 𝗋𝖺𝗇𝖽𝗈𝗆, 𝗆𝖺𝗍𝗁, 𝖼𝗈𝗅𝗅𝖾𝖼𝗍𝗂𝗈𝗇𝗌, 𝗁𝖾𝖺𝗉𝗊, 𝗍𝗒𝗉𝗂𝗇𝗀, 𝗅𝗈𝖺𝖽_𝖽𝗈𝗍𝖾𝗇𝗏, 𝗉𝖾𝗋𝗆𝗎𝗍𝖺𝗍𝗂𝗈𝗇𝗌, 𝗌𝗒𝗌, 𝗈𝗌, 𝗉𝗅𝖺𝗍𝖿𝗈𝗋𝗆, 𝗌𝗎𝖻𝗉𝗋𝗈𝖼𝖾𝗌𝗌, 
• 𝖢𝖺𝗅𝗅𝗂𝗇𝗀 𝖼𝗎𝗌𝗍𝗈𝗆 𝖢/𝖢++ 𝖼𝗈𝖽𝖾 𝖿𝗋𝗈𝗆 𝖯𝗒𝗍𝗁𝗈𝗇 (𝖢𝗒𝗍𝗁𝗈𝗇 )
• 𝖴𝗇𝗂𝖼𝗈𝖽𝖾 𝖼𝗁𝖺𝗋𝖺𝖼𝗍𝖾𝗋 𝗁𝖺𝗇𝖽𝗅𝗂𝗇𝗀 (𝗌𝗍𝗋𝗂𝗇𝗀 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖲𝖲𝖧 𝖼𝗈𝗇𝗇𝖾𝖼𝗍𝗂𝗈𝗇𝗌 𝗅𝗂𝖻𝗋𝖺𝗋𝗒
• 𝖯𝗋𝗈𝖿𝗂𝗅𝗂𝗇𝗀 𝗉𝗒𝗍𝗁𝗈𝗇 𝖼𝗈𝖽𝖾: 𝗆𝖾𝖺𝗌𝗎𝗋𝗂𝗇𝗀 𝖾𝗑𝖾𝖼𝗎𝗍𝗂𝗈𝗇 𝗍𝗂𝗆𝖾, 𝗆𝖾𝗆𝗈𝗋𝗒 𝗎𝗌𝖾𝖽(𝗍𝗂𝗆𝖾, 𝖼𝗉𝗋𝗈𝖿𝗂𝗅𝖾, 𝗅𝗂𝗇𝖾_𝗉𝗋𝗈𝖿𝗂𝗅𝖾𝗋 𝗆𝗈𝖽𝗎𝗅𝖾𝗌)
• 𝖣𝖺𝗍𝖺 𝗏𝗂𝗌𝗎𝖺𝗅𝗂𝗓𝖺𝗍𝗂𝗈𝗇 (𝗆𝖺𝗍𝗉𝗅𝗈𝗍𝗅𝗂𝖻 )
• 𝖡𝖺𝗌𝗂𝖼 𝖽𝖺𝗍𝖺 𝖺𝗇𝖺𝗅𝗒𝗌𝗂𝗌 
• 𝖠𝗌𝗒𝗇𝖼𝗁𝗋𝗈𝗇𝗈𝗎𝗌 𝗉𝗋𝗈𝗀𝗋𝖺𝗆𝗆𝗂𝗇𝗀 (𝖺𝗌𝗒𝗇𝖼𝗂𝗈 𝗆𝗈𝖽𝗎𝗅𝖾)
• 𝖴𝗇𝗂𝗍 𝗍𝖾𝗌𝗍 𝖿𝗋𝖺𝗆𝖾𝗐𝗈𝗋𝗄 (𝗉𝗒𝗍𝖾𝗌𝗍)
• Static code analysis & lint tools, security guidelines
• Various Python interpreters- CPython, PyPy 
• 𝖣𝗈 𝗂𝗇 𝖯𝗒𝗍𝗁𝗈𝗇, 𝖾𝗏𝖾𝗋𝗒𝗍𝗁𝗂𝗇𝗀 𝗐𝗁𝖺𝗍 𝗈𝗇𝖾 𝖼𝖺𝗇 𝖽𝗈 𝗎𝗌𝗂𝗇𝗀: 𝖻𝖺𝗌𝗁, 𝗌𝖾𝖽, 𝖺𝗐𝗄 


𝖤𝗏𝖾𝗋𝗒 𝗅𝖺𝗇𝗀𝗎𝖺𝗀𝖾 𝖺𝗅𝗌𝗈 𝗁𝖺𝗌 𝖼𝖾𝗋𝗍𝖺𝗂𝗇 𝖺𝖽𝗏𝖺𝗇𝖼𝖾𝖽 𝖿𝖾𝖺𝗍𝗎𝗋𝖾𝗌, 𝗐𝗁𝗂𝖼𝗁 𝖾𝗇𝖺𝖻𝗅𝖾 𝖺 𝗉𝗋𝗈𝗀𝗋𝖺𝗆𝗆𝖾𝗋 𝗍𝗈 𝖻𝗎𝗂𝗅𝖽 𝗉𝗈𝗐𝖾𝗋𝖿𝗎𝗅 𝗂𝖽𝗂𝗈𝗆𝗌 𝗍𝗈 𝗌𝗈𝗅𝗏𝖾 𝖼𝗈𝗆𝗉𝗅𝖾𝗑 𝗉𝗋𝗈𝖻𝗅𝖾𝗆𝗌 𝗎𝗌𝗂𝗇𝗀 𝗍𝗁𝖾 𝗅𝖺𝗇𝗀𝗎𝖺𝗀𝖾. 
𝗕𝗲𝗹𝗼𝘄 𝗮𝗿𝗲 𝘀𝗼𝗺𝗲 𝗣𝘆𝘁𝗵𝗼𝗻 𝗮𝗱𝘃𝗮𝗻𝗰𝗲𝗱 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀:
• 𝖵𝖺𝗋𝗂𝗈𝗎𝗌 𝗉𝖺𝖼𝗄𝖺𝗀𝖾𝗌: 𝗇𝗎𝗆𝗉𝗒, 𝗌𝖼𝗂𝗉𝗒, 𝗉𝖺𝗇𝖽𝖺𝗌, 
• 𝖲𝗍𝗋𝗂𝖼𝗍 𝗍𝗒𝗉𝗂𝗇𝗀
• 𝖢𝗅𝗈𝗌𝗎𝗋𝖾𝗌
• 𝖣𝖾𝖼𝗈𝗋𝖺𝗍𝗈𝗋𝗌
• 𝖦𝖾𝗇𝖾𝗋𝖺𝗍𝗈𝗋𝗌
• 𝖨𝗍𝖾𝗋𝖺𝗍𝗈𝗋𝗌
• 𝖥𝗎𝗇𝖼𝗍𝗂𝗈𝗇 𝖼𝗎𝗋𝗋𝗒𝗂𝗇𝗀
• 𝖬𝗈𝗇𝗄𝖾𝗒 𝗉𝖺𝗍𝖼𝗁𝗂𝗇𝗀
• 𝖣𝖺𝗍𝖺𝖼𝗅𝖺𝗌𝗌
• 𝖿𝗎𝗇𝖼𝗍𝗈𝗈𝗅𝗌 𝗆𝗈𝖽𝗎𝗅𝖾
• 𝗂𝗍𝖾𝗋𝗍𝗈𝗈𝗅𝗌 𝗆𝗈𝖽𝗎𝗅𝖾
• 𝖼𝗈𝗅𝗅𝖾𝖼𝗍𝗂𝗈𝗇𝗌 𝗆𝗈𝖽𝗎𝗅𝖾
